xboinc.retrieve
===============

.. py:module:: xboinc.retrieve


Classes
-------

.. autoapisummary::

   xboinc.retrieve.ResultRetriever


Module Contents
---------------

.. py:class:: ResultRetriever(user, dev_server=False, silent=False)

   Class to retrieve and manage results from Xboinc simulations.

   This class provides functionality to retrieve, index, and manage simulation
   results from BOINC work units. It can untar result files, create indexes,
   and provide various views and statistics about completed jobs.

   .. attribute:: _user

      The user that submitted the BOINC jobs

      :type: str

   .. attribute:: _domain

      The domain where results are stored (e.g., 'eos')

      :type: str

   .. attribute:: _directory

      Path to the directory containing results

      :type: FsPath

   .. attribute:: _dev_server

      Whether using development server

      :type: bool

   .. attribute:: _df

      Indexed DataFrame of all available results

      :type: pd.DataFrame

   .. rubric:: Examples

   >>> retriever = ResultRetriever('myuser', dev_server=True)
   >>> studies = retriever.get_study_list()
   >>> for job_name, particles in retriever.iterate_results('my_study'):
   ...     # Process particles data
   ...     pass


   .. py:method:: _untar_results(path: xaux.FsPath, silent: bool = False)

      Untar all compressed result files in the given path.

      :param path: Directory path containing .tar.gz files to extract
      :type path: FsPath
      :param silent: If True, suppress progress bar output (default: False)
      :type silent: bool, optional



   .. py:method:: _index_results(path: xaux.FsPath, silent: bool = False) -> pandas.DataFrame

      Index all result files in the given path and create a DataFrame.

      Scans for .bin files in subdirectories and extracts metadata from
      filenames to create a structured index of available results.

      :param path: Directory path to scan for result files
      :type path: FsPath
      :param silent: If True, suppress progress bar output (default: False)
      :type silent: bool, optional

      :returns: DataFrame with columns: user, study_name, job_name, wu_name, bin_file
                Each row represents one available result file
      :rtype: pd.DataFrame



   .. py:attribute:: _user


   .. py:attribute:: _domain


   .. py:attribute:: _dev_server
      :value: False



   .. py:attribute:: _to_delete
      :value: []



   .. py:attribute:: _df


   .. py:method:: get_overview()

      Get a comprehensive overview of all available results.

      :returns: DataFrame containing all indexed results with columns:
                user, study_name, job_name, wu_name, bin_file
      :rtype: pd.DataFrame



   .. py:method:: get_study_list()

      Get a list of all unique study names in the available results.

      :returns: Sorted list of unique study names found in the results
      :rtype: list of str



   .. py:method:: get_study_status(study_name, verbose=False)

      Get detailed status information for a specific study.

      Compares local results with server work units to provide comprehensive
      status information including completion rates and missing jobs.

      :param study_name: Name of the study to check status for
      :type study_name: str
      :param verbose: If True, print detailed job lists (default: False)
      :type verbose: bool, optional

      :returns:

                - list: Job names available in results
                - set: Job names missing from results but present on server
      :rtype: tuple of (list, set)

      :raises ValueError: If study_name is not found in results or server work units

      .. warning::

         UserWarning
             If there are mismatches between local results and server status



   .. py:method:: iterate_results(study_name)

      Iterate over all results for a specific study.

      Yields tuples of job names and their corresponding particle data
      for all completed jobs in the specified study.

      :param study_name: Name of the study to iterate over
      :type study_name: str

      :Yields: *tuple of (str, xpart.Particles)* -- Job name and corresponding particles object for each result

      :raises ValueError: If study_name is not found in available results

      .. warning::

         UserWarning
             If a binary file is incompatible with current Xboinc version

      .. rubric:: Examples

      >>> retriever = ResultRetriever('myuser', dev_server=True)
      >>> for job_name, particles in retriever.iterate_results('my_study'):
      ...     print(f"Processing job: {job_name}")
      ...     print(f"Number of particles: {len(particles.x)}")



   .. py:method:: clean(study_name)

      Clean up results for a specific study.

      Removes all binary result files, empty directories, and clears
      the study from the internal DataFrame index.

      :param study_name: Name of the study to clean up
      :type study_name: str

      :raises ValueError: If study_name is not found in available results

      .. warning::

         This operation is irreversible. All result files for the study
         will be permanently deleted.



   .. py:method:: iterate(user, study_name, dev_server=False, silent=False)
      :classmethod:


      Class method to directly iterate over results for a user and study.

      Convenient method that creates a ResultRetriever instance and immediately
      starts iterating over results without requiring explicit instantiation.

      :param user: The user that submitted the BOINC jobs
      :type user: str
      :param study_name: Name of the study to iterate over
      :type study_name: str
      :param dev_server: Whether to use development server (default: False)
      :type dev_server: bool, optional
      :param silent: Whether to suppress output messages (default: True)
      :type silent: bool, optional

      :Yields: *tuple of (str, xpart.Particles)* -- Job name and corresponding particles object for each result

      .. rubric:: Examples

      >>> for job_name, particles in ResultRetriever.iterate('myuser', 'my_study', dev_server=True):
      ...     # Process particles data
      ...     pass



   .. py:method:: overview(user, dev_server=False, silent=False)
      :classmethod:


      Class method to get an overview of results for a specific user.

      :param user: The user that submitted the BOINC jobs
      :type user: str
      :param dev_server: Whether to use development server (default: False)
      :type dev_server: bool, optional
      :param silent: Whether to suppress output messages (default: True)
      :type silent: bool, optional

      :returns: DataFrame with overview of all available results
      :rtype: pd.DataFrame

      .. rubric:: Examples

      >>> overview_df = ResultRetriever.overview('myuser', dev_server=True)
      >>> print(overview_df.groupby('study_name').size())



   .. py:method:: status(user, study_name, dev_server=False, silent=False, verbose=False)
      :classmethod:


      Class method to get status of results for a specific user and study.

      :param user: The user that submitted the BOINC jobs
      :type user: str
      :param study_name: Name of the study to check status for
      :type study_name: str
      :param dev_server: Whether to use development server (default: False)
      :type dev_server: bool, optional
      :param silent: Whether to suppress output messages (default: True)
      :type silent: bool, optional
      :param verbose: If True, print detailed job lists (default: False)
      :type verbose: bool, optional

      :returns:

                - list: Job names available in results
                - set: Job names missing from results but present on server
      :rtype: tuple of (list, set)

      .. rubric:: Examples

      >>> available, missing = ResultRetriever.status('myuser', 'my_study', dev_server=True)
      >>> print(f"Available jobs: {len(available)}, Missing jobs: {len(missing)}")



   .. py:method:: study_list(user, dev_server=False, silent=False)
      :classmethod:


      Class method to get a list of all studies for a specific user.

      :param user: The user that submitted the BOINC jobs
      :type user: str
      :param dev_server: Whether to use development server (default: False)
      :type dev_server: bool, optional
      :param silent: Whether to suppress output messages (default: True)
      :type silent: bool, optional

      :returns: Sorted list of unique study names found in the results
      :rtype: list of str

      .. rubric:: Examples

      >>> studies = ResultRetriever.study_list('myuser', dev_server=True)
      >>> print(studies)



